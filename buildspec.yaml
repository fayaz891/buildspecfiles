
version: 0.2
phases:
  install:
    commands:
      - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator
      - curl -sS -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.25.6/2023-01-30/bin/linux/amd64/kubectl
      - chmod +x ./kubectl ./aws-iam-authenticator
      - export PATH=$PWD/:$PATH
      #- yum update -y && yum -y install jq python3-pip python3-dev virtualenv -y && pip3 install --upgrade awscli
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.us-east-2.amazonaws.com
  build:
    commands:
      -  IMAGE_TAG=$CODEBUILD_BUILD_NUMBER
      - docker build -t $IMAGE_REPO:$IMAGE_TAG -f Dockerfile . 
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $IMAGE_REPO:$IMAGE_TAG
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name $SERVICE_ROLE --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - aws sts get-caller-identity
      - aws eks update-kubeconfig --region us-east-2 --name shared-services
      - kubectl get pods
      - sed -i "s|TAG|${IMAGE_TAG}|g;s|IMAGE_REPO|$IMAGE_REPO|g;s*MONGODB_VALUE*${MONGODB//&/\\&}*g;" infra/deployment.yaml
      - echo $IMAGE_TAG "tagggg"
      -  echo ${IMAGE_REPO} "repo"
      - cat infra/deployment.yaml
      - kubectl apply -f infra/deployment.yaml
      - kubectl rollout status deployment -n ${NAMESPACE} ${APP_NAME} --timeout=300s
