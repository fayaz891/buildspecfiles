version: 0.2
phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    commands:
      - IMAGE_TAG=$CODEBUILD_BUILD_NUMBER
      - cd pim-app
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG --build-arg AWS_ACCESS_KEY_VALUE=$AWS_ACCESS_KEY_VALUE --build-arg AWS_SECRET_KEY_VALUE=$AWS_SECRET_KEY_VALUE --build-arg AWS_REGION_VALUE=$AWS_REGION_VALUE --build-arg AWS_BUCKET_VALUE=$AWS_BUCKET_VALUE --build-arg DATABASE_URI_VALUE=$DATABASE_URI_VALUE -f Dockerfile .
      - echo $IMAGE_REPO_NAME:$IMAGE_TAG
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - CREDENTIALS=$(aws sts assume-role --role-arn arn:aws:iam::816408769239:role/kubernetes_deployment --role-session-name kubernetes_deployment --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - echo $AWS_ACCESS_KEY_ID
      - echo $AWS_SECRET_ACCESS_KEY
      - echo $AWS_SESSION_TOKEN
      - aws sts get-caller-identity
      - sed -i "s/IMAGE_REPO_NAME/${IMAGE_REPO_NAME}/g; s%AWS_DEFAULT_REGION%${AWS_DEFAULT_REGION}%g; s/AWS_ACCOUNT_ID/${AWS_ACCOUNT_ID}/g; s/IMAGE_TAG/${IMAGE_TAG}/g; s/NAME_SPACE/${NAME_SPACE}/g; s/SERVICE_NAME/${SERVICE_NAME}/g; s/SERVICE_TYPE/${SERVICE_TYPE}/g; s/SERVICE_PORT/${SERVICE_PORT}/g;s/REPLICAS/${REPLICAS}/g;" "k8s/servicefile.yaml"
      - cat k8s/servicefile.yaml
      - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $CLUSTER_NAME
      - kubectl apply -f k8s/servicefile.yaml
